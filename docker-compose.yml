version: "3.9"

services:
  app-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: springboot_backend_cont
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/database
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=postgres_data
      - SPRING_PROFILES_ACTIVE=dev
      - JWT_SECRET=c3b2528feb17f290ec58263d1ce025450e6e1205e87a30637ceed8aa98117bcafe53a4180076e95b70ed283d985f5543b1f65b071d8127f721b436c030b8dc94c70ccee287061597cb590a669ee5b2e2400c0756f441bf7832e6e27ea772ccfdb71cfecd696e70208137af3fdfdf756a3d9359020e18a4190af7991675e6d974
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - two-tier

  app-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_cont
    ports:
      - "5173:5173"
    environment:
      - VITE_BASE_URL=http://app-backend:8080
    depends_on:
      - app-backend
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - two-tier

  postgres:
    image: postgis/postgis:17-3.5
    container_name: postgre_cont
    environment:
      - POSTGRES_DB=database
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=postgres_data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d database"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - two-tier

networks:
  two-tier:
    driver: bridge

volumes:
  postgres_data:
